@page "/category/new"
@page "/category/edit/{Id:guid}"
@rendermode InteractiveServer
@using RecipeApp.Models
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@(Id == Guid.Empty ? "Add New Category" : "Edit Category")</PageTitle>

<div class="container mx-auto p-6 max-w-2xl">
    <div class="bg-white shadow-md rounded-lg p-6">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">
            @(Id == Guid.Empty ? "Add New Category" : "Edit Category")
        </h1>

        <EditForm Model="@category" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-600 mb-4" />

            <div class="space-y-6">
                <!-- English Name -->
                <div>
                    <label for="englishName" class="block text-sm font-medium text-gray-700 mb-2">
                        Category Name (English) *
                    </label>
                    <InputText id="englishName" 
                               @bind-Value="category.Name.English" 
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                               placeholder="Enter category name in English" />
                    <ValidationMessage For="@(() => category.Name.English)" class="text-red-600 text-sm mt-1" />
                </div>

                <!-- Vietnamese Name -->
                <div>
                    <label for="vietnameseName" class="block text-sm font-medium text-gray-700 mb-2">
                        Tên danh mục (Tiếng Việt)
                    </label>
                    <InputText id="vietnameseName" 
                               @bind-Value="category.Name.Vietnamese" 
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                               placeholder="Nhập tên danh mục bằng tiếng Việt" />
                    <ValidationMessage For="@(() => category.Name.Vietnamese)" class="text-red-600 text-sm mt-1" />
                </div>

                <!-- Category Image -->
                <div>
                    <label for="imageFileName" class="block text-sm font-medium text-gray-700 mb-2">
                        Category Image (File Name)
                    </label>
                    <InputText id="imageFileName" 
                               @bind-Value="category.ImageFileName" 
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                               placeholder="e.g., appetizers.jpg" />
                    <p class="text-sm text-gray-500 mt-1">
                        Enter the filename of the image (e.g., appetizers.jpg). Images should be placed in /wwwroot/images/categories/
                    </p>
                    @if (!string.IsNullOrEmpty(category.ImageFileName))
                    {
                        <div class="mt-2">
                            <img src="/images/categories/@category.ImageFileName" 
                                 alt="@category.Name.English" 
                                 class="w-24 h-24 object-cover rounded-lg border border-gray-300"
                                 onerror="this.src='/images/placeholder-category.png'" />
                        </div>
                    }
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-end gap-4 mt-8">
                <button type="button" 
                        @onclick="Cancel"
                        class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    Cancel
                </button>
                <button type="submit" 
                        disabled="@isSubmitting"
                        class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed">
                    @if (isSubmitting)
                    {
                        <svg class="animate-spin w-4 h-4" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Saving...</span>
                    }
                    else
                    {
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"></path>
                        </svg>
                        <span>@(Id == Guid.Empty ? "Create Category" : "Update Category")</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Guid Id { get; set; }

    [SupplyParameterFromForm]
    private Category category { get; set; } = new();
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id != Guid.Empty)
        {
            await LoadCategory();
        }
    }

    private async Task LoadCategory()
    {
        try
        {
            var loadedCategory = await HttpClient.GetFromJsonAsync<Category>($"api/categories/{Id}");
            if (loadedCategory != null)
            {
                category = loadedCategory;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Category not found.");
                Navigation.NavigateTo("/categories");
            }
        }
        catch (HttpRequestException ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading category: {ex.Message}");
            Navigation.NavigateTo("/categories");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return;
        
        isSubmitting = true;

        try
        {
            HttpResponseMessage response;
            
            if (Id == Guid.Empty)
            {
                // Create new category
                response = await HttpClient.PostAsJsonAsync("api/categories", category);
            }
            else
            {
                // Update existing category
                response = await HttpClient.PutAsJsonAsync($"api/categories/{Id}", category);
            }

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/categories");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to save category: {errorContent}");
            }
        }
        catch (HttpRequestException ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving category: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/categories");
    }
}
