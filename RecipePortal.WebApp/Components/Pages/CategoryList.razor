@page "/categories"
@rendermode InteractiveServer
@using RecipeApp.Models
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>Category Management</PageTitle>

<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-800">Category Management</h1>
        <a href="/category/new" class="inline-flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 transform hover:scale-105">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Add New Category
        </a>
    </div>

    @if (isLoading)
    {
        <p class="text-gray-600">Loading categories...</p>
    }
    else if (categories == null || categories.Count == 0)
    {
        <div class="bg-gray-100 border border-gray-300 rounded-lg p-6 text-center">
            <p class="text-gray-600 text-lg">No categories found.</p>
            <p class="text-gray-500 mt-2">Start by creating your first category.</p>
        </div>
    }
    else
    {
        <div class="bg-white shadow-md rounded-lg overflow-hidden">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Image
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Category Name (English)
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Category Name (Vietnamese)
                        </th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var category in categories)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @if (!string.IsNullOrEmpty(category.ImageFileName))
                                {
                                    <img src="/images/categories/@category.ImageFileName" 
                                         alt="@category.Name.English" 
                                         class="w-12 h-12 object-cover rounded-lg"
                                         onerror="this.src='/images/placeholder-category.png'" />
                                }
                                else
                                {
                                    <div class="w-12 h-12 bg-gray-200 rounded-lg flex items-center justify-center">
                                        <span class="text-gray-400 text-xs">No Image</span>
                                    </div>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                @category.Name.English
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @category.Name.Vietnamese
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <div class="flex justify-end items-center gap-2">
                                    <a href="/category/edit/@category.Id" 
                                       class="inline-flex items-center gap-1 px-3 py-2 text-sm font-medium text-blue-600 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 rounded-lg transition-all duration-200 hover:shadow-md">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                        </svg>
                                        Edit
                                    </a>
                                    <button @onclick="() => ConfirmDelete(category)" 
                                            class="inline-flex items-center gap-1 px-3 py-2 text-sm font-medium text-red-600 bg-red-50 hover:bg-red-100 hover:text-red-700 rounded-lg transition-all duration-200 hover:shadow-md">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="text-lg font-medium text-gray-900">Confirm Delete</h3>
                <div class="mt-2 px-7 py-3">
                    <p class="text-sm text-gray-500">
                        Are you sure you want to delete the category "@categoryToDelete?.Name.English"?
                        This action cannot be undone.
                    </p>
                </div>
                <div class="flex justify-center gap-4 mt-4">
                    <button @onclick="CancelDelete" 
                            class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg transition-all duration-200 hover:shadow-md">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                        Cancel
                    </button>
                    <button @onclick="DeleteCategory" 
                            class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-red-600 hover:bg-red-700 rounded-lg transition-all duration-200 hover:shadow-md">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Category>? categories;
    private bool showDeleteModal = false;
    private Category? categoryToDelete;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Ensure data is reloaded when navigating to this page
        if (categories == null)
        {
            await LoadCategories();
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            isLoading = true;
            StateHasChanged(); // Force UI update
            using var httpClient = HttpClientFactory.CreateClient("ApiClient");
            categories = await httpClient.GetFromJsonAsync<List<Category>>("api/categories");
        }
        catch (HttpRequestException ex)
        {
            // Handle error - could show a toast message
            Console.WriteLine($"Error loading categories: {ex.Message}");
            categories = new List<Category>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Force UI update after loading
        }
    }

    private void ConfirmDelete(Category category)
    {
        categoryToDelete = category;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        categoryToDelete = null;
    }

    private async Task DeleteCategory()
    {
        if (categoryToDelete != null)
        {
            try
            {
                using var httpClient = HttpClientFactory.CreateClient("ApiClient");
                var response = await httpClient.DeleteAsync($"api/categories/{categoryToDelete.Id}");
                
                if (response.IsSuccessStatusCode)
                {
                    await LoadCategories();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete category: {errorContent}");
                }
            }
            catch (HttpRequestException ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting category: {ex.Message}");
            }
        }
        
        showDeleteModal = false;
        categoryToDelete = null;
    }
}
