@page "/recipe/new"
@page "/recipe/edit/{Id:guid}"
@rendermode InteractiveServer
@using Facet.Extensions
@using Facet.Mapping
@using RecipeApp.Models
@using RecipePortal.WebApp.Mappers
@using RecipePortal.WebApp.Models
@inject HttpClient HttpClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@(Id == Guid.Empty ? "Add New Recipe" : "Edit Recipe")</PageTitle>

<div class="container mx-auto p-6 max-w-4xl">
    <div class="bg-white shadow-md rounded-lg p-6">
        <h1 class="text-3xl font-bold text-gray-800 mb-6">
            @(Id == Guid.Empty ? "Add New Recipe" : "Edit Recipe")
        </h1>

        <EditForm Model="@portalRecipe" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-600 mb-4" />

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Left Column -->
                <div class="space-y-6">
                    <!-- English Name -->
                    <div>
                        <label for="englishName" class="block text-sm font-medium text-gray-700 mb-2">
                            Recipe Name (English) *
                        </label>
                        <InputText id="englishName"
                                   @bind-Value="portalRecipe.Name.English" 
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                   placeholder="Enter recipe name in English" />
                        <ValidationMessage For="@(() => portalRecipe.Name.English)" class="text-red-600 text-sm mt-1" />
                    </div>

                    <!-- English Description -->
                    <div>
                        <label for="englishDescription" class="block text-sm font-medium text-gray-700 mb-2">
                            Description (English) *
                        </label>
                        <InputTextArea id="englishDescription"
                                       @bind-Value="portalRecipe.Description.English" 
                                       rows="3"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                       placeholder="Enter recipe description in English" />
                        <ValidationMessage For="@(() => portalRecipe.Description.English)" class="text-red-600 text-sm mt-1" />
                    </div>

                    <!-- Prep Time -->
                    <div>
                        <label for="prepTime" class="block text-sm font-medium text-gray-700 mb-2">
                            Preparation Time
                        </label>
                        <InputText id="prepTime" 
                                   @bind-Value="portalRecipe.PrepTime" 
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                   placeholder="e.g., 15 minutes" />
                    </div>

                    <!-- Cook Time -->
                    <div>
                        <label for="cookTime" class="block text-sm font-medium text-gray-700 mb-2">
                            Cook Time
                        </label>
                        <InputText id="cookTime" 
                                   @bind-Value="portalRecipe.CookTime" 
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                   placeholder="e.g., 30 minutes" />
                    </div>

                    <!-- Image File Name -->
                    <div>
                        <label for="imageFileName" class="block text-sm font-medium text-gray-700 mb-2">
                            Image File Name
                        </label>
                        <InputText id="imageFileName" 
                                   @bind-Value="portalRecipe.ImageFileName" 
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                   placeholder="e.g., garlic_butter_bread.jpg" />
                        <p class="mt-1 text-xs text-gray-500">Place images in MAUI project's Resources/Raw/Images folder</p>
                    </div>

                    <!-- Category -->
                    <div>
                        <label for="category" class="block text-sm font-medium text-gray-700 mb-2">
                            Category *
                        </label>
                        <InputSelect id="category" 
                                     @bind-Value="portalRecipe.CategoryId" 
                                     class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                            <option value="">Select a category</option>
                            @if (categories != null)
                            {
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.Name.English</option>
                                }
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => portalRecipe.CategoryId)" class="text-red-600 text-sm mt-1" />
                    </div>
                </div>

                <!-- Right Column -->
                <div class="space-y-6">
                    <!-- Vietnamese Name -->
                    <div>
                        <label for="vietnameseName" class="block text-sm font-medium text-gray-700 mb-2">
                            Tên công thức (Tiếng Việt) *
                        </label>
                        <InputText
                                   @bind-Value="portalRecipe.Name.Vietnamese" 
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                   placeholder="Nhập tên công thức bằng tiếng Việt" />
                    </div>

                    <!-- Vietnamese Description -->
                    <div>
                        <label for="vietnameseDescription" class="block text-sm font-medium text-gray-700 mb-2">
                            Mô tả (Tiếng Việt) *
                        </label>
                        <InputTextArea 
                                       @bind-Value="portalRecipe.Description.Vietnamese" 
                                       rows="3"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                       placeholder="Nhập mô tả công thức bằng tiếng Việt" />
                    </div>
                </div>
            </div>

            <!-- Ingredients Section -->
            <div class="mt-8">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Ingredients / Nguyên liệu</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- English Ingredients -->
                    <div>
                        <label for="ingredientsTextEnglish" class="block text-sm font-medium text-gray-700 mb-2">
                            Ingredients (English, one per line) *
                        </label>
                        <InputTextArea id="ingredientsTextEnglish" 
                                       @bind-Value="portalRecipe.IngredientsTextEnglish" 
                                       rows="6"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                       placeholder="1 cup flour&#10;2 eggs&#10;1/2 cup milk" />
                    </div>

                    <!-- Vietnamese Ingredients -->
                    <div>
                        <label for="ingredientsTextVietnamese" class="block text-sm font-medium text-gray-700 mb-2">
                            Nguyên liệu (Tiếng Việt, mỗi dòng một nguyên liệu) *
                        </label>
                        <InputTextArea id="ingredientsTextVietnamese" 
                                       @bind-Value="portalRecipe.IngredientsTextVietnamese" 
                                       rows="6"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                       placeholder="1 cốc bột mì&#10;2 quả trứng&#10;1/2 cốc sữa" />
                    </div>
                </div>
            </div>

            <!-- Instructions Section -->
            <div class="mt-8">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Instructions / Hướng dẫn</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- English Instructions -->
                    <div>
                        <label for="instructionsTextEnglish" class="block text-sm font-medium text-gray-700 mb-2">
                            Instructions (English, one step per line) *
                        </label>
                        <InputTextArea id="instructionsTextEnglish" 
                                       @bind-Value="portalRecipe.InstructionsTextEnglish" 
                                       rows="8"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                       placeholder="Mix flour and eggs&#10;Add milk gradually&#10;Cook for 10 minutes" />
                    </div>

                    <!-- Vietnamese Instructions -->
                    <div>
                        <label for="instructionsTextVietnamese" class="block text-sm font-medium text-gray-700 mb-2">
                            Hướng dẫn (Tiếng Việt, mỗi dòng một bước) *
                        </label>
                        <InputTextArea id="instructionsTextVietnamese" 
                                       @bind-Value="portalRecipe.InstructionsTextVietnamese" 
                                       rows="8"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                       placeholder="Trộn bột mì và trứng&#10;Thêm sữa từ từ&#10;Nấu trong 10 phút" />
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-end gap-4 mt-8">
                <button type="button" 
                        @onclick="Cancel"
                        class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    Cancel
                </button>
                <button type="submit" 
                        disabled="@isSubmitting"
                        class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed">
                    @if (isSubmitting)
                    {
                        <svg class="animate-spin w-4 h-4" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Saving...</span>
                    }
                    else
                    {
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"></path>
                        </svg>
                        <span>@(Id == Guid.Empty ? "Create Recipe" : "Update Recipe")</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Guid Id { get; set; }

    [SupplyParameterFromForm]
    private PortalRecipe portalRecipe { get; set; } = new();
    private List<Category>? categories;
    private bool isSubmitting = false;
    private bool hasRendered = false;
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        
        if (Id != Guid.Empty)
        {
            await LoadRecipe();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        hasRendered = true;
        
        if (!string.IsNullOrEmpty(errorMessage))
        {
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            errorMessage = null;
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await HttpClient.GetFromJsonAsync<List<Category>>("api/categories");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            categories = new List<Category>();
        }
    }

    private async Task LoadRecipe()
    {
        try
        {
            var loadedRecipe = await HttpClient.GetFromJsonAsync<Recipe>($"api/recipes/{Id}");
            if (loadedRecipe != null)
            {
                portalRecipe = await loadedRecipe.ToFacetAsync<Recipe,PortalRecipe,RecipeMapper>();
            }
            else
            {
                if (hasRendered)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Recipe not found.");
                }
                else
                {
                    errorMessage = "Recipe not found.";
                }
                Navigation.NavigateTo("/recipes");
            }
        }
        catch (HttpRequestException ex)
        {
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error loading recipe: {ex.Message}");
            }
            else
            {
                errorMessage = $"Error loading recipe: {ex.Message}";
            }
            Navigation.NavigateTo("/recipes");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return;
        
        isSubmitting = true;

        try
        {
            HttpResponseMessage response;
            var recipe = await portalRecipe.ToFacetAsync<PortalRecipe,Recipe,PortalRecipeMapper>();
            
            if (Id == Guid.Empty)
            {
                // Create new recipe
                response = await HttpClient.PostAsJsonAsync("api/recipes", recipe);
            }
            else
            {
                // Update existing recipe
                response = await HttpClient.PutAsJsonAsync($"api/recipes/{Id}", recipe);
            }

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/recipes");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                var message = $"Failed to save recipe: {errorContent}";
                
                if (hasRendered)
                {
                    await JSRuntime.InvokeVoidAsync("alert", message);
                }
                else
                {
                    errorMessage = message;
                }
            }
        }
        catch (HttpRequestException ex)
        {
            var message = $"Error saving recipe: {ex.Message}";
            
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync("alert", message);
            }
            else
            {
                errorMessage = message;
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/recipes");
    }
}
