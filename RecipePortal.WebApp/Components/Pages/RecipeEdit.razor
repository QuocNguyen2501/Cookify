@page "/recipe/new"
@page "/recipe/edit/{Id:guid}"
@rendermode InteractiveServer
@using RecipeApp.Models
@using RecipePortal.WebApp.Models
@using RecipePortal.WebApp.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IRecipeFormService RecipeFormService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@(Id == Guid.Empty ? "Add New Recipe" : "Edit Recipe")</PageTitle>
<div class="container mx-auto p-6">
    <h1 class="text-3xl font-bold text-gray-800 mb-6">
        @(Id == Guid.Empty ? "Add New Recipe" : "Edit Recipe")
    </h1>
    <div class="flex flex-col lg:flex-row gap-6">
        <div class="recipe-information flex-1 lg:max-w-4xl">
            <div class="bg-white shadow-md rounded-lg p-6">

                <EditForm Model="@portalRecipe" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-red-600 mb-4" />

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Left Column -->
                        <div class="space-y-6">
                            <!-- English Name -->
                            <div>
                                <label for="englishName" class="block text-sm font-medium text-gray-700 mb-2">
                                    Recipe Name (English) *
                                </label>
                                <InputText id="englishName" @bind-Value="portalRecipe.Name.English"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="Enter recipe name in English" />
                                <ValidationMessage For="@(() => portalRecipe.Name.English)"
                                    class="text-red-600 text-sm mt-1" />
                            </div>

                            <!-- English Description -->
                            <div>
                                <label for="englishDescription" class="block text-sm font-medium text-gray-700 mb-2">
                                    Description (English) *
                                </label>
                                <InputTextArea id="englishDescription" @bind-Value="portalRecipe.Description.English"
                                    rows="3"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="Enter recipe description in English" />
                                <ValidationMessage For="@(() => portalRecipe.Description.English)"
                                    class="text-red-600 text-sm mt-1" />
                            </div>

                            <!-- Prep Time -->
                            <div>
                                <label for="prepTime" class="block text-sm font-medium text-gray-700 mb-2">
                                    Preparation Time
                                </label>
                                <InputText id="prepTime" @bind-Value="portalRecipe.PrepTime"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="e.g., 15 minutes" />
                            </div>

                            <!-- Cook Time -->
                            <div>
                                <label for="cookTime" class="block text-sm font-medium text-gray-700 mb-2">
                                    Cook Time
                                </label>
                                <InputText id="cookTime" @bind-Value="portalRecipe.CookTime"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="e.g., 30 minutes" />
                            </div>

                            <!-- Image File Name -->
                            <div>
                                <label for="imageFileName" class="block text-sm font-medium text-gray-700 mb-2">
                                    Image File Name
                                </label>
                                <InputText id="imageFileName" @bind-Value="portalRecipe.ImageFileName"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="e.g., garlic_butter_bread.jpg" />
                                <p class="mt-1 text-xs text-gray-500">Place images in MAUI project's
                                    Resources/Raw/Images folder</p>
                            </div>

                            <!-- Category -->
                            <div>
                                <label for="category" class="block text-sm font-medium text-gray-700 mb-2">
                                    Category *
                                </label>
                                <InputSelect id="category" @bind-Value="portalRecipe.CategoryId"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                                    <option value="">Select a category</option>
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.Id">@category.Name.English</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => portalRecipe.CategoryId)"
                                    class="text-red-600 text-sm mt-1" />
                            </div>
                        </div>

                        <!-- Right Column -->
                        <div class="space-y-6">
                            <!-- Vietnamese Name -->
                            <div>
                                <label for="vietnameseName" class="block text-sm font-medium text-gray-700 mb-2">
                                    Tên công thức (Tiếng Việt) *
                                </label>
                                <InputText @bind-Value="portalRecipe.Name.Vietnamese"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="Nhập tên công thức bằng tiếng Việt" />
                            </div>

                            <!-- Vietnamese Description -->
                            <div>
                                <label for="vietnameseDescription" class="block text-sm font-medium text-gray-700 mb-2">
                                    Mô tả (Tiếng Việt) *
                                </label>
                                <InputTextArea @bind-Value="portalRecipe.Description.Vietnamese" rows="3"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="Nhập mô tả công thức bằng tiếng Việt" />
                            </div>
                        </div>
                    </div>

                    <!-- Ingredients Section -->
                    <div class="mt-8">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Ingredients / Nguyên liệu</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- English Ingredients -->
                            <div>
                                <label for="ingredientsTextEnglish"
                                    class="block text-sm font-medium text-gray-700 mb-2">
                                    Ingredients (English, one per line) *
                                </label>
                                <InputTextArea id="ingredientsTextEnglish"
                                    @bind-Value="portalRecipe.IngredientsTextEnglish" rows="6"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="1 cup flour&#10;2 eggs&#10;1/2 cup milk" />
                            </div>

                            <!-- Vietnamese Ingredients -->
                            <div>
                                <label for="ingredientsTextVietnamese"
                                    class="block text-sm font-medium text-gray-700 mb-2">
                                    Nguyên liệu (Tiếng Việt, mỗi dòng một nguyên liệu) *
                                </label>
                                <InputTextArea id="ingredientsTextVietnamese"
                                    @bind-Value="portalRecipe.IngredientsTextVietnamese" rows="6"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="1 cốc bột mì&#10;2 quả trứng&#10;1/2 cốc sữa" />
                            </div>
                        </div>
                    </div>

                    <!-- Instructions Section -->
                    <div class="mt-8">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Instructions / Hướng dẫn</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- English Instructions -->
                            <div>
                                <label for="instructionsTextEnglish"
                                    class="block text-sm font-medium text-gray-700 mb-2">
                                    Instructions (English, one step per line) *
                                </label>
                                <InputTextArea id="instructionsTextEnglish"
                                    @bind-Value="portalRecipe.InstructionsTextEnglish" rows="8"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="Mix flour and eggs&#10;Add milk gradually&#10;Cook for 10 minutes" />
                            </div>

                            <!-- Vietnamese Instructions -->
                            <div>
                                <label for="instructionsTextVietnamese"
                                    class="block text-sm font-medium text-gray-700 mb-2">
                                    Hướng dẫn (Tiếng Việt, mỗi dòng một bước) *
                                </label>
                                <InputTextArea id="instructionsTextVietnamese"
                                    @bind-Value="portalRecipe.InstructionsTextVietnamese" rows="8"
                                    class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                                    placeholder="Trộn bột mì và trứng&#10;Thêm sữa từ từ&#10;Nấu trong 10 phút" />
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex justify-end gap-4 mt-8">
                        <button type="button" @onclick="Cancel"
                            class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                            Cancel
                        </button>
                        <button type="button" @onclick="ClearForm"
                            class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-orange-700 bg-orange-100 hover:bg-orange-200 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            Clear
                        </button>
                        <button type="submit" disabled="@isSubmitting"
                            class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed">
                            @if (isSubmitting)
                            {
                                <svg class="animate-spin w-4 h-4" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor"
                                        stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor"
                                        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                                    </path>
                                </svg>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4">
                                    </path>
                                </svg>
                                <span>@(Id == Guid.Empty ? "Create Recipe" : "Update Recipe")</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
        <div class="img-upload lg:w-80 flex-shrink-0">
            <div class="bg-white shadow-md rounded-lg p-6">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Image Upload</h3>

                @if (isImageAnalyzing)
                {
                    <!-- AI Analysis in Progress -->
                    <div class="border-2 border-dashed border-blue-300 rounded-lg p-6 text-center bg-blue-50">
                        <svg class="animate-spin mx-auto h-12 w-12 text-blue-500" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4">
                            </circle>
                            <path class="opacity-75" fill="currentColor"
                                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z">
                            </path>
                        </svg>
                        <div class="mt-4">
                            <span class="text-sm font-medium text-blue-900">
                                Analyzing image with AI...
                            </span>
                            <p class="mt-1 text-xs text-blue-700">This may take up to 5 minutes</p>
                        </div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(uploadedImageDataUrl))
                {
                    <!-- Image Preview -->
                    <div class="border-2 border-solid border-gray-300 rounded-lg p-4 text-center">
                        <img src="@uploadedImageDataUrl" alt="Uploaded image"
                            class="max-w-full h-auto max-h-48 mx-auto rounded-lg shadow-sm">
                        <div class="mt-4">
                            <button type="button" @onclick="ClearImage"
                                class="inline-flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors duration-200">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                                Clear Image
                            </button>
                            <button type="button" @onclick="() => TriggerFileInput()"
                                class="inline-flex items-center gap-2 px-3 py-2 ml-2 text-sm font-medium text-indigo-700 bg-indigo-100 hover:bg-indigo-200 rounded-md transition-colors duration-200">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z">
                                    </path>
                                </svg>
                                Upload Different Image
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Upload Drop Zone -->
                    <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                        <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48"
                            aria-hidden="true">
                            <path
                                d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                                stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                        <div class="mt-4">
                            <label for="file-upload" class="cursor-pointer">
                                <span class="mt-2 block text-sm font-medium text-gray-900">
                                    Upload an image to analyze with AI
                                </span>
                            </label>
                            <InputFile id="file-upload" class="sr-only" accept="image/*" OnChange="HandleFileSelected" />
                            <p class="mt-1 text-xs text-gray-500">PNG, JPG, GIF up to 10MB</p>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(imageAnalysisError))
                {
                    <div class="mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
                        <div class="flex">
                            <svg class="flex-shrink-0 h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd"
                                    d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                                    clip-rule="evenodd"></path>
                            </svg>
                            <div class="ml-3">
                                <p class="text-sm text-red-800">@imageAnalysisError</p>
                            </div>
                        </div>
                    </div>
                }

                <p class="text-sm text-gray-500 mt-4">
                    Upload an image of a recipe and AI will automatically analyze it and fill in the form fields.
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public Guid Id { get; set; }

    [SupplyParameterFromForm]
    private PortalRecipe portalRecipe { get; set; } = new PortalRecipe();
    private List<Category>? categories;
    private bool isSubmitting = false;
    private bool hasRendered = false;
    private string? errorMessage = null;

    // Image upload related fields
    private bool isImageAnalyzing = false;
    private string? uploadedImageDataUrl = null;
    private string? imageAnalysisError = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();

        if (Id != Guid.Empty)
        {
            await LoadRecipe();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        hasRendered = true;

        if (!string.IsNullOrEmpty(errorMessage))
        {
            await JSRuntime.InvokeVoidAsync(identifier: "alert", errorMessage);
            errorMessage = null;
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await RecipeFormService.LoadCategoriesAsync();
        }
        catch (Exception ex)
        {
            categories = new List<Category>();
            var errorMessage = $"Error loading categories: {ex.Message}";
            
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync(identifier: "alert", errorMessage);
            }
            else
            {
                this.errorMessage = errorMessage;
            }
        }
    }

    private async Task LoadRecipe()
    {
        try
        {
            portalRecipe = await RecipeFormService.LoadRecipeAsync(Id);
        }
        catch (ArgumentException ex)
        {
            var message = ex.Message;
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync(identifier: "alert", message);
            }
            else
            {
                errorMessage = message;
            }
            Navigation.NavigateTo(uri: "/recipes");
        }
        catch (Exception ex)
        {
            var message = $"Error loading recipe: {ex.Message}";
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync(identifier: "alert", message);
            }
            else
            {
                errorMessage = message;
            }
            Navigation.NavigateTo(uri: "/recipes");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        IBrowserFile? file = e.File;
        if (file != null)
        {
            await ProcessUploadedImage(file);
        }
    }

    private async Task ProcessUploadedImage(IBrowserFile file)
    {
        try
        {
            imageAnalysisError = null;

            using (Stream? stream = file.OpenReadStream(maxAllowedSize: 2 * 1024 * 1024))
            using (MemoryStream? memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                byte[]? buffer = memoryStream.ToArray();

                string? imageBase64 = Convert.ToBase64String(buffer);
                uploadedImageDataUrl = $"data:{file.ContentType};base64,{imageBase64}";
                isImageAnalyzing = true;
                StateHasChanged();

                await AnalyzeImageWithAI(buffer, file.ContentType, file.Name);
            }
        }
        catch (Exception ex)
        {
            imageAnalysisError = $"Error processing image: {ex.Message}";
            isImageAnalyzing = false;
            StateHasChanged();
        }
    }

    private async Task AnalyzeImageWithAI(byte[] fileBytes, string contentType, string fileName)
    {
        try
        {
            AIRecipeResponse? aiResponse = await RecipeFormService.AnalyzeImageWithAIAsync(fileBytes, contentType, fileName);
            PopulateFormFromAIResponse(aiResponse);
            imageAnalysisError = null;
        }
        catch (ArgumentException ex)
        {
            imageAnalysisError = ex.Message;
        }
        catch (TimeoutException ex)
        {
            imageAnalysisError = ex.Message;
        }
        catch (Exception ex)
        {
            imageAnalysisError = $"Error during AI analysis: {ex.Message}";
        }
        finally
        {
            isImageAnalyzing = false;
            StateHasChanged();
        }
    }

    private void PopulateFormFromAIResponse(AIRecipeResponse aiResponse)
    {
        try
        {
            // Map basic properties
            portalRecipe.Name = aiResponse.Name;
            portalRecipe.Description = aiResponse.Description;
            portalRecipe.ImageFileName = aiResponse.ImageFileName;

            // Convert lists to text format for the form
            portalRecipe.IngredientsTextEnglish = string.Join(separator: "\n", aiResponse.Ingredients.Select(i => i.English));
            portalRecipe.IngredientsTextVietnamese = string.Join(separator: "\n", aiResponse.Ingredients.Select(i => i.Vietnamese));
            portalRecipe.InstructionsTextEnglish = string.Join(separator: "\n", aiResponse.Instructions.Select(i => i.English));
            portalRecipe.InstructionsTextVietnamese = string.Join(separator: "\n", aiResponse.Instructions.Select(i =>
            i.Vietnamese));

            StateHasChanged();
        }
        catch (Exception ex)
        {
            imageAnalysisError = $"Error populating form: {ex.Message}";
        }
    }

    private void ClearImage()
    {
        uploadedImageDataUrl = null;
        imageAnalysisError = null;
        StateHasChanged();
    }

    private async Task TriggerFileInput()
    {
        await JSRuntime.InvokeVoidAsync(identifier: "eval", "document.getElementById('file-upload').click()");
    }

    private async Task HandleValidSubmit()
    {
        if (isSubmitting) return;

        isSubmitting = true;

        try
        {
            await RecipeFormService.SaveRecipeAsync(portalRecipe, Id);
            Navigation.NavigateTo(uri: "/recipes");
        }
        catch (Exception ex)
        {
            var message = $"Error saving recipe: {ex.Message}";
            if (hasRendered)
            {
                await JSRuntime.InvokeVoidAsync(identifier: "alert", message);
            }
            else
            {
                errorMessage = message;
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo(uri: "/recipes");
    }

    private void ClearForm()
    {
        // Reset the form to initial state
        portalRecipe = new PortalRecipe();
        
        // Clear image-related fields
        uploadedImageDataUrl = null;
        imageAnalysisError = null;
        isImageAnalyzing = false;
        
        // Force UI update
        StateHasChanged();
    }
}