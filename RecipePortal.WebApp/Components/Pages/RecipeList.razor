@page "/recipes"
@rendermode InteractiveServer
@using RecipePortal.WebApp.Models
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<PageTitle>Recipe Management</PageTitle>

<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-800">Recipe Management</h1>
        <div class="flex gap-4">
            <button @onclick="ExportRecipes" 
                    class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
                Export JSON
            </button>
            <a href="/recipe/new" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                Add New Recipe
            </a>
        </div>
    </div>

    @if (isLoading)
    {
        <p class="text-gray-600">Loading recipes...</p>
    }
    else if (recipes == null || recipes.Count == 0)
    {
        <div class="bg-gray-100 border border-gray-300 rounded-lg p-6 text-center">
            <p class="text-gray-600 text-lg">No recipes found.</p>
            <p class="text-gray-500 mt-2">Start by creating your first recipe.</p>
        </div>
    }
    else
    {
        <div class="bg-white shadow-md rounded-lg overflow-hidden">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Recipe Name (English)
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Recipe Name (Vietnamese)
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Category
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Prep/Cook Time
                        </th>
                        <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var recipe in recipes)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                @recipe.Name.English
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @recipe.Name.Vietnamese
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @(recipe.Category?.Name.English ?? "No Category")
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @recipe.PrepTime / @recipe.CookTime
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <a href="/recipe/edit/@recipe.Id" class="text-indigo-600 hover:text-indigo-900 mr-4">
                                    Edit
                                </a>
                                <button @onclick="() => ConfirmDelete(recipe)" 
                                        class="text-red-600 hover:text-red-900">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="text-lg font-medium text-gray-900">Confirm Delete</h3>
                <div class="mt-2 px-7 py-3">
                    <p class="text-sm text-gray-500">
                        Are you sure you want to delete the recipe "@recipeToDelete?.Name.English"?
                        This action cannot be undone.
                    </p>
                </div>
                <div class="flex justify-center gap-4 mt-4">
                    <button @onclick="CancelDelete" 
                            class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400">
                        Cancel
                    </button>
                    <button @onclick="DeleteRecipe" 
                            class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Recipe>? recipes;
    private bool showDeleteModal = false;
    private Recipe? recipeToDelete;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipes();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Ensure data is reloaded when navigating to this page
        if (recipes == null)
        {
            await LoadRecipes();
        }
    }

    private async Task LoadRecipes()
    {
        try
        {
            isLoading = true;
            StateHasChanged(); // Force UI update
            recipes = await HttpClient.GetFromJsonAsync<List<Recipe>>("api/recipes");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error loading recipes: {ex.Message}");
            recipes = new List<Recipe>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Force UI update after loading
        }
    }

    private async Task ExportRecipes()
    {
        try
        {
            var response = await HttpClient.GetAsync("api/recipes/export");
            
            if (response.IsSuccessStatusCode)
            {
                var fileName = response.Content.Headers.ContentDisposition?.FileName?.Trim('"') 
                               ?? $"recipes_{DateTime.UtcNow:yyyyMMdd_HHmmss}.json";
                var fileBytes = await response.Content.ReadAsByteArrayAsync();
                
                // Use JavaScript interop to download the file
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, Convert.ToBase64String(fileBytes));
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to export recipes.");
            }
        }
        catch (HttpRequestException ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting recipes: {ex.Message}");
        }
    }

    private void ConfirmDelete(Recipe recipe)
    {
        recipeToDelete = recipe;
        showDeleteModal = true;
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        recipeToDelete = null;
    }

    private async Task DeleteRecipe()
    {
        if (recipeToDelete != null)
        {
            try
            {
                var response = await HttpClient.DeleteAsync($"api/recipes/{recipeToDelete.Id}");
                
                if (response.IsSuccessStatusCode)
                {
                    await LoadRecipes();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete recipe: {errorContent}");
                }
            }
            catch (HttpRequestException ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting recipe: {ex.Message}");
            }
        }
        
        showDeleteModal = false;
        recipeToDelete = null;
    }
}
